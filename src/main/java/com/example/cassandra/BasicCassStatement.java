package com.example.cassandra;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Statement;
import java.sql.Struct;

public class BasicCassStatement
    implements Statement
{
    private boolean m_isClosed;
    private BasicCassConnection m_conn;

    public BasicCassStatement(BasicCassConnection conn)
    {
	m_conn = conn;
	m_isClosed = false;
    }

    /////////////////////////////////////////////////// Statement implementation
    public
    void addBatch(String sql) 
	throws SQLException
    {
    }

    public
    void cancel() 
	throws SQLException
    {
    }

    public
    void clearBatch() 
	throws SQLException
    {
    }

    public
    void clearWarnings() 
	throws SQLException
    {
    }

    public
    void close() 
	throws SQLException
    {
	m_isClosed = true;
    }

    public
    boolean execute(String sql) 
	throws SQLException
    {
	
	return false;
    }

    public
    boolean execute(String sql, int autoGeneratedKeys) 
	throws SQLException
    {
	return false;
    }

    public
    boolean execute(String sql, int[] columnIndexes) 
	throws SQLException
    {
	return false;
    }

    public
    boolean execute(String sql, String[] columnNames) 
	throws SQLException
    {
	return false;
    }

    public
    int[] executeBatch() 
	throws SQLException
    {
	return null;
    }

    public
    ResultSet executeQuery(String sql) 
	throws SQLException
    {
	com.datastax.driver.core.Session cassSession = m_conn.getCassSession();
	com.datastax.driver.core.ResultSet rs = 
	    cassSession.execute(sql);

	BasicCassResultSet brs = new BasicCassResultSet(rs);

	return brs;
    }

    public
    int executeUpdate(String sql) 
	throws SQLException
    {
	return 0;
    }

    public
    int executeUpdate(String sql, int autoGeneratedKeys) 
	throws SQLException
    {
	return 0;
    }

    public
    int executeUpdate(String sql, int[] columnIndexes) 
	throws SQLException
    {
	return 0;
    }

    public
    int executeUpdate(String sql, String[] columnNames) 
	throws SQLException
    {
	return 0;
    }

    public
    Connection getConnection() 
	throws SQLException
    {
	return m_conn;
    }

    public
    int getFetchDirection() 
	throws SQLException
    {
	return 0;
    }

    public
    int getFetchSize() 
	throws SQLException
    {
	return 0;
    }

    public
    ResultSet getGeneratedKeys() 
	throws SQLException
    {
	return null;
    }

    public
    int getMaxFieldSize() 
	throws SQLException
    {
	return 0;
    }

    public
    int getMaxRows() 
	throws SQLException
    {
	return 0;
    }

    public
    boolean getMoreResults() 
	throws SQLException
    {
	return false;
    }

    public
    boolean getMoreResults(int current) 
	throws SQLException
    {
	return false;
    }

    public
    int getQueryTimeout() 
	throws SQLException
    {
	return 0;
    }

    public
    ResultSet getResultSet() 
	throws SQLException
    {
	return null;
    }

    public
    int getResultSetConcurrency() 
	throws SQLException
    {
	return 0;
    }

    public
    int getResultSetHoldability() 
	throws SQLException
    {
	return 0;
    }

    public
    int getResultSetType() 
	throws SQLException
    {
	return 0;
    }

    public
    int getUpdateCount() 
	throws SQLException
    {
	return 0;
    }

    public
    SQLWarning getWarnings() 
	throws SQLException
    {
	return null;
    }

    public
    boolean isClosed() 
	throws SQLException
    {
	return m_isClosed;
    }

    public
    boolean isPoolable() 
	throws SQLException
    {
	return false;
    }

    public
    void setCursorName(String name) 
	throws SQLException
    {
    }

    public
    void setEscapeProcessing(boolean enable) 
	throws SQLException
    {
    }

    public
    void setFetchDirection(int direction) 
	throws SQLException
    {
    }

    public
    void setFetchSize(int rows) 
	throws SQLException
    {
    }

    public
    void setMaxFieldSize(int max) 
	throws SQLException
    {
    }

    public
    void setMaxRows(int max) 
	throws SQLException
    {
    }

    public
    void setPoolable(boolean poolable) 
	throws SQLException
    {
    }

    public
    void setQueryTimeout(int seconds) 
	throws SQLException
    {
    }

    /////////////////////////////////////////////////// Wrapper implementation
    public
	boolean isWrapperFor(Class iface)
	throws SQLException
    {
	return false;
    }

    public
	<T> T unwrap(Class<T> iface)
	throws SQLException
    {
	return null;
    }
}